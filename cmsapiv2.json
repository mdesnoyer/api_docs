{
    "swagger": "2.0",
    "host": "services.neon-images.com",
    "basePath": "/api/v2",
    "info": {
        "description": "Provides consumers with the ability to hit Neon services. Note that, while all the endpoints list their parameters as *query* parameters, they can be sent in the body as well (in a flat JSON object).",
        "title": "Neon CMS API",
        "termsOfService": "https://app.neon-lab.com/terms/",
        "contact": {},
        "license": {
            "name": "Copyright"
        },
        "version": "2.1"
    },
    "tags": [
        {
            "name": "videos",
            "description": "Video management"
        },
        {
            "name": "accounts",
            "description": "Account management"
        },
        {
            "name": "account limits",
            "description": "View limits on the account"
        },
        {
            "name": "integrations",
            "description": "Integration management"
        },
        {
            "name": "statistics",
            "description": "View statistics on objects"
        },
        {
            "name": "thumbnails",
            "description": "Thumbnail management"
        },
        {
            "name": "telemetry",
            "description": "Information about the telemetry"
        },
        {
            "name": "callback",
            "description": "Dummy endpoint to define the callback"
        },
        {
            "name": "batch",
            "description": "Batch multiple calls"
        },
        {
            "name": "tag",
            "description": "Thumbnail collection mapping"
        },
        {
            "name": "users",
            "description": "User management."
        }
    ],
    "x-documentationSets": [
        "public",
        "internal"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ],
    "paths": {
        "/{account_id}": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "accounts"
                ],
                "summary": "View account",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The account associated with the requested ID.",
                        "schema": {
                            "$ref": "#/definitions/account"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "accounts"
                ],
                "summary": "Update account",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "default_width",
                        "in": "query",
                        "description": "The default width of the account.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "default_height",
                        "in": "query",
                        "description": "The default height of the account.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "default_thumbnail_id",
                        "in": "query",
                        "description": "The id of the default thumbnail wanted for the account.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated account associated with the requested ID.",
                        "schema": {
                            "$ref": "#/definitions/account"
                        }
                    }
                }
            }
        },
        "/{account_id}/telemetry/snippet": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "telemetry"
                ],
                "summary": "Get the telemetry snippet",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The html snippet used to add the telemetry tag to the user's site",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{account_id}/email": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "post": {
                "summary": "Send an email on behalf of this account.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "template_slug",
                        "in": "query",
                        "description": "Template slug corresponds to value in Mandrill.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "template_args",
                        "in": "query",
                        "description": "Expected JSON object here with keys of the template parameters,  and values of what you want those parameters to say.  For example, if my template was as follows  Hello {first_name} buy this {item}!  My JSON object would look like this,  { \"first_name\" : \"Kevin\", \"item\" : \"xbox\"} ",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to_email_address",
                        "in": "query",
                        "description": "Where this email will be sent.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from_email_address",
                        "in": "query",
                        "description": "Who this email should be from.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from_name",
                        "in": "query",
                        "description": "The name of the person sending the email.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "subject",
                        "in": "query",
                        "description": "The subject line of the email.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "reply_to",
                        "in": "query",
                        "description": "Who the person receiving this email should reply to (email).",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A message that says the email has been successfully sent.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{account_id}/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The email of the user.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A user with requested username.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The email of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "first_name",
                        "in": "query",
                        "description": "The first name of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "description": "The last name of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "The title of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "send_emails",
                        "in": "query",
                        "description": "Does this user want to receive to emails.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The modified user.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            }
        },
        "/{account_id}/integrations/brightcove": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "integrations"
                ],
                "summary": "View Brightcove integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "description": "ID of the integration.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the Brightcove integration with that `account_id` and `integration_id`.",
                        "schema": {
                            "$ref": "#/definitions/brightcove_integration"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "integrations"
                ],
                "summary": "Create a Brightcove integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Neon ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publisher_id",
                        "in": "query",
                        "description": "Brightcove account ID of the publisher.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "read_token",
                        "in": "query",
                        "description": "Brightcove specific token for reading for token-parameter-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "write_token",
                        "in": "query",
                        "description": "Brightcove specific token for writing for token-parameter-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application_client_id",
                        "in": "query",
                        "description": "Client id for the Brightcove application for OAuth-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application_client_secret",
                        "in": "query",
                        "description": "Client secret for the Brightcove application for OAuth-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "playlist_feed_ids",
                        "in": "query",
                        "description": "List of feed_ids for this integration.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uses_batch_provisioning",
                        "in": "query",
                        "description": "Whether or not to use batched provisioning.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "callback_url",
                        "in": "query",
                        "description": "URL to call after a video has been processed.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "uses_bc_thumbnail_api",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's thumbnail API on their video player page.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "uses_bc_videojs_player",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's Video.js-based player",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "uses_bc_smart_player",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's Flash-based Smart player",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "uses_bc_gallery",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's gallery feature",
                        "required": true,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the newly-created Brightcove integration.",
                        "schema": {
                            "$ref": "#/definitions/brightcove_integration"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "integrations"
                ],
                "summary": "Update a Brightcove integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Neon ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "description": "ID of the integration.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publisher_id",
                        "in": "query",
                        "description": "Brightcove account ID of the publisher.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "read_token",
                        "in": "query",
                        "description": "Brightcove specific token for reading for token-parameter-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "write_token",
                        "in": "query",
                        "description": "Brightcove specific token for writing for token-parameter-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application_client_id",
                        "in": "query",
                        "description": "Client id for the Brightcove application for OAuth-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application_client_secret",
                        "in": "query",
                        "description": "Client secret for the Brightcove application for OAuth-based authentication.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "playlist_feed_ids",
                        "in": "query",
                        "description": "List of feed_ids for this integration.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uses_batch_provisioning",
                        "in": "query",
                        "description": "Whether or not to use batched provisioning.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "callback_url",
                        "in": "query",
                        "description": "URL to call after a video has been processed.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "uses_bc_thumbnail_api",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's thumbnail API on their video player page.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "uses_bc_videojs_player",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's Video.js-based player",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "uses_bc_smart_player",
                        "in": "query",
                        "description": "Set if publisher uses Brightcove's Flash-based Smart player",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the updated Brightcove integration.",
                        "schema": {
                            "$ref": "#/definitions/brightcove_integration"
                        }
                    }
                }
            }
        },
        "/{account_id}/integrations/brightcove/players": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "integrations"
                ],
                "summary": "View Brightcove Players",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Neon ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "description": "ID of the integration.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the list of Brightcove Players for `account_id` and `integration_id`.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "player_count": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "The number of players returned."
                                },
                                "players": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/brightcove_player"
                                    },
                                    "description": "List of Brightcove players."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Client is not authorized to view the requested list of players"
                    }
                }
            },
            "put": {
                "tags": [
                    "integrations"
                ],
                "summary": "Enable or disable tracking for a Brightcove player",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "type": "string",
                        "description": "Account ID of the player",
                        "required": true
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "type": "string",
                        "description": "Integration ID of the player",
                        "required": true
                    },
                    {
                        "name": "player_ref",
                        "in": "query",
                        "type": "string",
                        "description": "Brightcove reference ID of the player",
                        "required": true
                    },
                    {
                        "name": "is_tracked",
                        "in": "query",
                        "type": "boolean",
                        "description": "Set if Neon adds its tracking plugin to the player",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player tracking is updated",
                        "schema": {
                            "$ref": "#/definitions/brightcove_player"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access to player"
                    },
                    "500": {
                        "description": "Played failed to update"
                    }
                }
            }
        },
        "/{account_id}/integrations/ooyala": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "integrations"
                ],
                "summary": "View Ooyala integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "description": "ID of the integration.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the Ooyala integration with that `account_id` and `integration_id`.",
                        "schema": {
                            "$ref": "#/definitions/ooyala_integration"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "integrations"
                ],
                "summary": "Create an Ooyala integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publisher_id",
                        "in": "query",
                        "description": "ID of the publisher.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ooyala_api_key",
                        "in": "query",
                        "description": "API key for Ooyala integration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ooyala_api_secret",
                        "in": "query",
                        "description": "API secret for Ooyala integration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly-created Ooyala integration.",
                        "schema": {
                            "$ref": "#/definitions/ooyala_integration"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "integrations"
                ],
                "summary": "Update an Ooyala integration",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "integration_id",
                        "in": "query",
                        "description": "ID of the integration.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publisher_id",
                        "in": "query",
                        "description": "ID of the publisher.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ooyala_api_key",
                        "in": "query",
                        "description": "API key for Ooyala integration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ooyala_api_secret",
                        "in": "query",
                        "description": "API secret for Ooyala integration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Ooyala integration.",
                        "schema": {
                            "$ref": "#/definitions/ooyala_integration"
                        }
                    }
                }
            }
        },
        "/{account_id}/limits": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "account limits"
                ],
                "summary": "View rate limits for account",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rate limits for the corresponding account.",
                        "schema": {
                            "$ref": "#/definitions/limit"
                        }
                    }
                }
            }
        },
        "/{account_id}/tags": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "tag"
                ],
                "summary": "Get information about a tag.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "Comma-separated string of up to 100 tag IDs. If you want more than 100, see the batch api.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated string of fields to return. Can include `tag_type`, `name`, `thumbnail_ids`, `created`, and `updated`.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of tags corresponding the requested ids.",
                        "schema": {
                            "$ref": "#/definitions/tag"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "tag"
                ],
                "summary": "Create a new tag",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the Tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_ids",
                        "in": "query",
                        "description": "Comma-separated string of up to 100 thumbnail IDs, which you want to associate upon creation to this tag.",
                        "type": "string",
                        "required": false
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "A value in the list ('VIDEO', 'COL'), or null. Defaults to COL for collection. Videos are automatically tagged with a tag of type VIDEO.",
                        "type": "string",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the tag that was just posted.",
                        "schema": {
                            "$ref": "#/definitions/tag"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "tag"
                ],
                "summary": "Update a tag",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "ID of the tag that needs updated",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "thumbnail_ids",
                        "in": "query",
                        "description": "Comma-separated string of up to 100 thumbnail IDs. Already existing tags will be ignored, new ones will be added. ",
                        "type": "string",
                        "required": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the Tag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "A value in the list ('VIDEO', 'COL'), or null. Defaults to COL for collection. Videos are automatically tagged with a tag of type VIDEO.",
                        "type": "string",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the tag that was just updated.",
                        "schema": {
                            "$ref": "#/definitions/tag"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "tag"
                ],
                "summary": "Delete a tag",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "ID of the tag that needs updated",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ID of the tag that was just deleted."
                    }
                }
            }
        },
        "/{account_id}/tags/search": {
            "get": {
                "tags": [
                    "tag"
                ],
                "summary": "Filter tagged content by search criteria.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should start looking for videos. It will get videos older than this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "until",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should stop looking for videos. It will get videos up to this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum amount of videos that will be returned.",
                        "required": false,
                        "type": "number",
                        "default": 25,
                        "maximum": 100,
                        "minimum": 1,
                        "format": "integer"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated string of fields to return. Can include `tag_type`, `name`, `thumbnail_ids`, `created`, and `updated`.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Apply query on tag resource name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "show_hidden",
                        "in": "query",
                        "description": "Show content marked as hidden.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested tagged content.",
                        "schema": {
                            "$ref": "#/definitions/search_tags"
                        }
                    }
                }
            }
        },
        "/{account_id}/statistics/videos": {
            "get": {
                "tags": [
                    "statistics",
                    "videos"
                ],
                "summary": "Get basic video statistics.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "video_id",
                        "in": "query",
                        "description": "Comma-separated string of up to 100 video IDs.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated string of fields to return. Can include `experiment_state`, `winner_thumbnail`, `created`, and `updated`.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of video statistics with the requested fields.",
                        "schema": {
                            "$ref": "#/definitions/video_statistics"
                        }
                    }
                }
            }
        },
        "/{account_id}/statistics/thumbnails": {
            "get": {
                "tags": [
                    "statistics",
                    "thumbnails"
                ],
                "summary": "Basic thumbnail statistics",
                "description": "This will return basic thumbnail stats by `thumbnail_id` or `video_id`.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "video_id",
                        "in": "query",
                        "description": "Comma-separated string of up to 20 video IDs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_id",
                        "in": "query",
                        "description": "Comma-separated string of up to 100 thumbnail IDs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated string of fields to return. Can include `serving_frac` (the fraction of traffic seeing this thumbnail), `ctr` (the click-through rate), `impressions` (the number of impressions), `conversions` (the number of conversions), `created`, and `updated`.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of thumbnail statistics with the requested fields.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail_statistics"
                        }
                    }
                }
            }
        },
        "/{account_id}/statistics/estimated_lift": {
            "get": {
                "tags": [
                    "statistics"
                ],
                "summary": "Estimate the lift between thumbnails",
                "description": "Calculate an estimate lift between a baseline and other thumbnails",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "base_id",
                        "in": "query",
                        "description": "Thumbnail ID of the baseline thumbnail",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_ids",
                        "in": "query",
                        "description": "Comma-separated string of thumbnail IDs to compare against the baseline.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of estimated lifts",
                        "schema": {
                            "$ref": "#/definitions/estimated_lift_response"
                        }
                    }
                }
            }
        },
        "/{account_id}/thumbnails": {
            "get": {
                "tags": [
                    "thumbnails"
                ],
                "summary": "Get thumbnail.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_id",
                        "in": "query",
                        "description": "The ID of the thumbnail.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated string of fields to return.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A thumbnail with the requested fields.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "thumbnails"
                ],
                "summary": "Upload a new thumbnail and optionally associate it with a video, or a tag.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "description": "CSV of urls of thumbnails to upload",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "video_id",
                        "in": "query",
                        "description": "video id to associate the thumbnail with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "Commad Separated List of Tag IDs, which this thumbnail will be associated to.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly-created thumbnail.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "thumbnails"
                ],
                "summary": "Update an existing thumbnail.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_id",
                        "in": "query",
                        "description": "The thumbnail id to modify",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "If the thumbnail should be enabled for testing",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "Tag ID of already created tag, which this thumbnail will be associated to.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The modified thumbnail.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail"
                        }
                    }
                }
            }
        },
        "/{account_id}/thumbnail/tag": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "put": {
                "tags": [
                    "tag",
                    "thumbnails"
                ],
                "summary": "Add a tag id to a thumbnail. If you want to add more than one at a time, see the batch API.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_id",
                        "in": "query",
                        "description": "Thumbnail ID where a tag should be added.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "Tag ID of the tag that is to be added to the thumbnail.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The modified thumbnail.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "tag",
                    "thumbnails"
                ],
                "summary": "Delete a tag association on a thumbnail. If you want to delete more than one at a time, see the batch API.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_id",
                        "in": "query",
                        "description": "Thumbnail ID where tags should be deleted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag_id",
                        "in": "query",
                        "description": "Tag ID of the tag that is to be removed from the thumbnail.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The modified thumbnail.",
                        "schema": {
                            "$ref": "#/definitions/thumbnail"
                        }
                    }
                }
            }
        },
        "/{account_id}/videos": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Fetch one or more videos.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "video_id",
                        "in": "query",
                        "description": "Comma-separated list of video IDs.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names. Defaults to 'testing_enabled', 'job_id', 'url', 'state', 'publish_date', 'video_id', 'tag_id' and 'title'. Also available are 'thumbnails', 'bad_thumbnails', 'integration_id', 'serving_url', 'duration', 'custom_data', 'created', 'updated'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "share_token",
                        "in": "query",
                        "description": "For authorization via shared url (e.g., via email sent to friend). This is provided via the share endpoint.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested videos.",
                        "schema": {
                            "$ref": "#/definitions/videos"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "videos"
                ],
                "summary": "Submit a new video for processing.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "external_video_ref",
                        "in": "query",
                        "description": "The external video ID.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "description": "The video URL. Ex: `http://myvideo.mp4`.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "callback_url",
                        "in": "query",
                        "description": "The URL that will be called with the result. Ex: `http://call.here`.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "The title of the video.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The duration of the video in seconds",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "publish_date",
                        "in": "query",
                        "description": "The date that the video was published.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "custom_data",
                        "in": "query",
                        "description": "A dictionary of custom data about the video.",
                        "required": false,
                        "type": "string",
                        "format": "json"
                    },
                    {
                        "name": "default_thumbnail_url",
                        "in": "query",
                        "description": "URL of the default thumbnail to use.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "thumbnail_ref",
                        "in": "query",
                        "description": "Reference to the thumbnail object in your database.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "n_thumbs",
                        "in": "query",
                        "description": "The number of thumbnails to extract.",
                        "required": false,
                        "type": "integer",
                        "default": 5
                    },
                    {
                        "name": "callback_email",
                        "in": "query",
                        "description": "The email address to send results to when the video is done processing.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "reprocess",
                        "in": "query",
                        "type": "boolean",
                        "required": false,
                        "description": "If true, the video will be reprocessed with demographic categories added if new, or rewritten if already there."
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "M",
                            "F"
                        ],
                        "required": false,
                        "description": "If set, process the video for a target gender audience."
                    },
                    {
                        "name": "age",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "18-19",
                            "20-29",
                            "30-39",
                            "40-49",
                            "50+",
                            null
                        ],
                        "required": false,
                        "description": "If set, process the video for a target age range."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly-created video. Processing will not be complete.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "video": {
                                    "$ref": "#/definitions/video"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "videos"
                ],
                "summary": "Update an existing video.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "testing_enabled",
                        "in": "query",
                        "description": "Should testing be enabled?",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "hidden",
                        "in": "query",
                        "description": "Set the video as hidden, removing it in normal search results",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "The title of the video.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "callback_email",
                        "in": "query",
                        "description": "The email address to send results to when the video is done processing.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated video.",
                        "schema": {
                            "$ref": "#/definitions/video"
                        }
                    }
                }
            }
        },
        "/{account_id}/videos/share": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Get a token for sharing this video by url",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "video_id",
                        "in": "query",
                        "description": "ID of the video to be shared.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested token.",
                        "schema": {
                            "$ref": "#/definitions/share_token"
                        }
                    },
                    "401": {
                        "description": "Request is not authenticated"
                    },
                    "403": {
                        "description": "Account doesn't have access to this video"
                    },
                    "404": {
                        "description": "Video not found"
                    }
                }
            }
        },
        "/{account_id}/videos/search": {
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Filter videos by search criteria.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "ID of the account.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should start looking for videos. It will get videos older than this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "until",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should stop looking for videos. It will get videos up to this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum amount of videos that will be returned.",
                        "required": false,
                        "type": "number",
                        "default": 25,
                        "maximum": 100,
                        "minimum": 1,
                        "format": "integer"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names. Defaults to 'state', 'video_id', 'publish_date', 'title', 'url', 'testing_enabled', 'job_id' and 'tag_id'. Also available are 'thumbnails', 'bad_thumbnails', 'integration_id', 'serving_url', 'duration', 'custom_data', 'created', 'updated'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "show_hidden",
                        "in": "query",
                        "description": "Show content marked as hidden.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Apply query on video resource title.",
                        "required": false,
                        "type": "string"
                    }

                ],
                "responses": {
                    "200": {
                        "description": "The requested videos.",
                        "schema": {
                            "$ref": "#/definitions/search_videos"
                        }
                    }
                }
            }
        },
        "/videos/search": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "videos"
                ],
                "summary": "Filter videos by search criteria, for any account in the system.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "query",
                        "description": "ID of the account.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should start looking for videos. It will get videos older than this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "until",
                        "in": "query",
                        "description": "Microseconds since epoch, that represents where the next search should stop looking for videos. It will get videos up to this date.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum amount of videos that will be returned.",
                        "required": false,
                        "type": "number",
                        "default": 25,
                        "maximum": 100,
                        "minimum": 1,
                        "format": "integer"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names. Defaults to 'testing_enabled', 'job_id', 'url', 'state', 'publish_date', 'video_id', and 'title'.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested videos.",
                        "schema": {
                            "$ref": "#/definitions/search_videos"
                        }
                    }
                }
            }
        },
        "/feature": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "get": {
                "tags": [
                    "feature"
                ],
                "summary": "Get image feature details",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Comma separated list of ids of features that you want information on.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "model_name",
                        "in": "query",
                        "description": "Model name of the feature that you want information on.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names. Defaults to 'id', 'name', 'model_name'.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested features.",
                        "schema": {
                            "$ref": "#/definitions/feature"
                        }
                    }
                }
            }
        },
        "/email/support": {
            "post": {
                "tags": [
                    "email"
                ],
                "summary": "Send email to Neon support",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "from_name",
                        "in": "query",
                        "description": "Name of sender",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "from_email",
                        "in": "query",
                        "description": "Email address of sender",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "Message to be sent in email to support",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/batch": {
            "x-onlyVisibleInDocumentationSets": [
                "internal"
            ],
            "post": {
                "tags": [
                    "batch"
                ],
                "summary": "Batch a number of calls together.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "call_info",
                        "in": "body",
                        "description": "json object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/batch_call_params"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Results from all the calls, they are stateless, and can't depend on one another.",
                        "schema": {
                            "$ref": "#/definitions/batch_return_results"
                        }
                    }
                }
            }
        },
        "/video_transition_callback": {
            "put": {
                "tags": [
                    "callback"
                ],
                "summary": "This isn't a real endpoint! It's a placeholder to display the format of the callback that's sent to the `callback_url` when a video changes state.",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The body of the callback.",
                        "schema": {
                            "$ref": "#/definitions/video_transition_callback"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "batch_call_params": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "description": "access_token you use to access api calls"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/batch_request_object"
                    }
                }
            }
        },
        "batch_request_object": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string",
                    "description": "http method of this call (GET,PUT,POST,DELETE)"
                },
                "relative_url": {
                    "type": "string",
                    "description": "url without the scheme and host information, eg /api/v2/1234abcde"
                },
                "body": {
                    "type": "object",
                    "description": "json object with body params needed for a POST or PUT call"
                }
            }
        },
        "batch_return_results": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/batch_return_result"
                    },
                    "description": "All of the calls responses."
                }
            }
        },
        "batch_return_result": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string",
                    "description": "what method was called"
                },
                "relative_url": {
                    "type": "string",
                    "description": "the relative url that was called"
                },
                "response_code": {
                    "type": "integer",
                    "description": "http response code from the call"
                },
                "response": {
                    "type": "object",
                    "description": "response from the call, this has the same format as a singular call would have."
                }
            }
        },
        "brightcove_integration": {
            "type": "object",
            "properties": {
                "integration_id": {
                    "type": "string",
                    "description": "Type of integration."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the integration was last updated."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the integration was created."
                },
                "callback_url": {
                    "type": "string",
                    "description": "URL to call after a video has been processed."
                },
                "account_id": {
                    "type": "string",
                    "description": "Neon ID of the account."
                },
                "read_token": {
                    "type": "string",
                    "description": "Brightcove token for reading for token-parameter-based authentication."
                },
                "write_token": {
                    "type": "string",
                    "description": "Brightcove token for writing for token-parameter-based authentication."
                },
                "application_client_id": {
                    "type": "string",
                    "description": "Client id for the Brightcove application for OAuth-based authentication.",
                    "example": "8b089370-ce31-4ecf-9c14-7ffc6ff492b9"
                },
                "application_client_secret": {
                    "type": "string",
                    "description": "Client secret for the Brightcove application for OAuth-based authentication.",
                    "example": "zZu6_l62UCYhjpTuwEfWrNDrjEqyP9Pg19Sv5BUUGCig1CMA-mIuxy14DjH6n1xQHZi3_RPYfO8_YRGh8xAyyg"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether an intergration is enabled"
                },
                "id_field": {
                    "type": "string",
                    "description": "Which custom field to use for the video id. If it is _reference_id the reference_id is used, if it is _bc_id the id field is used."
                },
                "last_process_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time this integration was processed through the Neon system."
                },
                "uses_batch_provisioning": {
                    "type": "boolean",
                    "description": "Does this integration allow batch provisioning (FTP uploads)."
                },
                "playlist_feed_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of feed IDs for this integration."
                },
                "publisher_id": {
                    "type": "string",
                    "description": "The Brightcove account ID of the publisher.",
                    "example": "2294876105001"
                },
                "uses_bc_thumbnail_api": {
                    "type": "boolean",
                    "description": "Set if publisher uses Brightcove's thumbnail API on their video player page."
                },
                "uses_bc_videojs_player": {
                    "type": "boolean",
                    "description": "Set if publisher uses Brightcove's Video.js-based player."
                },
                "uses_bc_smart_player": {
                    "type": "boolean",
                    "description": "Set if publisher uses Brightcove's Flash-based Smart player."
                },
                "uses_bc_gallery": {
                    "type": "boolean",
                    "description": "Set if publisher uses Brightcove's gallery feature"
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "brightcove_player": {
            "type": "object",
            "description": "Configuration for a Brightcove Video.js-based player and tracking plugin",
            "properties": {
                "player_ref": {
                    "type": "string",
                    "description": "Brightcove reference ID of the player."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the player was created as ISO08601 date."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the player was last updated as ISO08601 date."
                },
                "name": {
                    "type": "string",
                    "description": "The Brightcove name of the player."
                },
                "is_tracked": {
                    "type": "boolean",
                    "description": "Determines if Neon adds its tracking plugin to the player."
                },
                "publish_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When Neon last successfully published the tracking plugin to the player."
                },
                "published_plugin_version": {
                    "type": "string",
                    "description": "Version of the tracking plugin last succesfully published to the player."
                },
                "last_attempt_result": {
                    "type": "string",
                    "description": "Result of the last attempt at publishing the player."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Description of the error."
                },
                "data": {
                    "type": "string",
                    "description": "More detail about the error."
                }
            }
        },
        "ooyala_integration": {
            "type": "object",
            "properties": {
                "integration_id": {
                    "type": "string",
                    "description": "Type of integration."
                },
                "partner_code": {
                    "type": "string",
                    "description": "Ooyala supplied code."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the integration was last updated."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the integration was created."
                },
                "account_id": {
                    "type": "string",
                    "description": "ID of the account."
                },
                "api_key": {
                    "type": "string",
                    "description": "API key for Ooyala integration."
                },
                "api_secret": {
                    "type": "string",
                    "description": "API secret for Ooyala integration."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "share_token": {
            "type": "object",
            "properties": {
                "share_token": {
                    "type": "string",
                    "description": "JWT token that enables viewing of a content item without login."
                }
            }
        },
        "tag": {
            "type": "object",
            "properties": {
                "tag_id": {
                    "type": "string",
                    "description": "Unique ID of this tag."
                },
                "account_id": {
                    "type": "string",
                    "description": "ID of the account this tag is associated to."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the tag."
                },
                "thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail"
                    },
                    "description": "Array of thumbnails associated to this tag."
                },
                "tag_type": {
                    "type": "string",
                    "description": "One of either 'COL' or 'VIDEO'."
                }
            }
        },
        "thumbnail": {
            "type": "object",
            "properties": {
                "video_id": {
                    "type": "string",
                    "description": "ID of the video this thumbnail is associated with."
                },
                "thumbnail_id": {
                    "type": "string",
                    "description": "Unique ID of this thumbnail."
                },
                "rank": {
                    "type": "string",
                    "minimum": 0,
                    "maximum": 6,
                    "description": "Neon Labs' ranking of this image, where lower numbers are higher rankings."
                },
                "frameno": {
                    "type": "integer",
                    "description": "Frame number where this image exists in the source video."
                },
                "neon_score": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 6,
                    "description": "Neon Labs' score for this image, where higher is better."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Can this image be shown?"
                },
                "height": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Height of the image in pixels."
                },
                "width": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Width of the image in pixels."
                },
                "external_ref": {
                    "type": "string",
                    "description": "ID of the asset in an external system."
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "neon",
                        "default",
                        "customupload"
                    ],
                    "description": "'neon' is generated by Neon Labs, 'default' is provided during the processing request, and 'customupload' is provided to Neon Labs after processing."
                },
                "url": {
                    "type": "string",
                    "description": "The location of the thumbnail."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO date for when the thumbnail was created."
                },
                "tag_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "tag_ids associated to this thumbnail"
                },
                "renditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail_rendition"
                    }
                },
                "feature_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "feature_ids associated to this thumbnail"
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO date for when the thumbnail was last updated."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "demographic_thumbnails": {
            "type": "object",
            "properties": {
                "gender": {
                    "type": "string",
                    "enum": [
                        "M",
                        "F",
                        null
                    ],
                    "description": "Gender of this demographic"
                },
                "age": {
                    "type": "string",
                    "enum": [
                        "18-19",
                        "20-29",
                        "30-39",
                        "40-49",
                        "50+",
                        null
                    ],
                    "description": "Age range for this demographic group"
                },
                "thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail"
                    },
                    "description": "Array of thumbnails chosen for this demographic"
                }
            }
        },
        "thumbnail_statistic": {
            "type": "object",
            "required": [
                "thumbnail_id",
                "video_id"
            ],
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the thumbnail was created."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the thumbnail was last updated."
                },
                "thumbnail_id": {
                    "type": "string",
                    "description": "Unique ID of the thumbnail."
                },
                "video_id": {
                    "type": "string",
                    "description": "ID of the video associated with this thumbnail."
                },
                "serving_frac": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "The fraction of traffic that is seeing this thumbnail."
                },
                "ctr": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "maximum": 1,
                    "description": "The click-through rate."
                },
                "conversions": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of conversions for this thumbnail."
                },
                "impressions": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of impressions for this thumbnail."
                }
            }
        },
        "thumbnail_statistics": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of thumbnail statistics returned."
                },
                "statistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail_statistic"
                    }
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "estimated_lift_response": {
            "type": "object",
            "properties": {
                "baseline_thumbnail_id": {
                    "type": "string",
                    "description": "The thumbnail ID of the baseline image"
                },
                "lift": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/estimated_lift"
                    }
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "estimated_lift": {
            "type": "object",
            "properties": {
                "thumbnail_id": {
                    "type": "string",
                    "description": "The thumbnail id"
                },
                "lift": {
                    "type": "number",
                    "format": "float",
                    "description": "The estimated lift of the thumbnail in fractions. For example, 0.0 is no lift, 0.2 is 20% lift, -0.3 is -30% lift. null if it cannot be calculated."
                }
            }
        },
        "thumbnail_rendition": {
            "type": "object",
            "description": "A thumbnail rendition is a image object in a specific format of a thumbnail. It represents a guarantee that the image is available for use in the specified size.",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The URL of this rendition available by GET.",
                    "example": "https://i0.cdn-neon.com/13ads230ff/full-thumbnail.jpg"
                },
                "width": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The width of the rendition in pixels.",
                    "example": 320
                },
                "height": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The height of the rendition in pixels.",
                    "example": 180
                },
                "aspect_ratio": {
                    "type": "string",
                    "enum": [
                        "16x9",
                        "1x1",
                        "21x9",
                        "4x3",
                        "5x4"
                    ],
                    "description": "The ratio of the width to height in square pixels. By convention, format is WxH in reduced to lowest terms.",
                    "example": "16x9"
                }
            }
        },
        "video": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "processing",
                        "processed",
                        "serving",
                        "failed"
                    ],
                    "description": "The state of the video."
                },
                "integration_id": {
                    "type": "string",
                    "description": "The ID of the integration."
                },
                "testing_enabled": {
                    "type": "boolean",
                    "description": "Is A/B testing enabled for this video?"
                },
                "job_id": {
                    "type": "string",
                    "description": "The job that processed this video."
                },
                "tag_id": {
                    "type": "array",
                    "description": "Tag id associated with this video.",
                    "items": {
                        "type": "string",
                        "description": "The ID of the tag."
                    }
                },
                "title": {
                    "type": "string",
                    "description": "The title of the video."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the video."
                },
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video."
                },
                "serving_url": {
                    "type": "string",
                    "description": "The URL to use when rendering an image for this video."
                },
                "publish_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the video was published"
                },
                "thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail"
                    },
                    "description": "An array of thumbnails for the video in order of score descending. Defaults to 6 items if available, including the default thumbnail."
                },
                "bad_thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail"
                    },
                    "description": "An array of low-score thumbnails for the video in order of score descending. Defaults to 6 items if available."
                },
                "demographic_thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/demographic_thumbnails"
                    },
                    "description": "List of thumbnails chosen for different demographics."
                },
                "duration": {
                    "type": "number",
                    "minimum": 0,
                    "description": "The length of the video in seconds."
                },
                "share_token": {
                    "type": "string",
                    "description": "JWT token that enables viewing of a content item without login."
                },
                "custom_data": {
                    "type": "object",
                    "description": "A dictionary of custom information about the video."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the video was created."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the video was last updated."
                },
                "estimated_time_remaining": {
                    "type": "number",
                    "description": "A float that represents the estimated amount of processing time left."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "video_statistic": {
            "type": "object",
            "required": [
                "video_id"
            ],
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the video was created."
                },
                "experimental_state": {
                    "type": "string",
                    "enum": [
                        "complete",
                        "disabled",
                        "override",
                        "running",
                        "unknown"
                    ],
                    "description": "The current state of the experiment associated with this video."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the video was last updated."
                },
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video."
                },
                "winner_thumbnail": {
                    "type": "string",
                    "description": "ID of the winning thumbnail, if known."
                }
            }
        },
        "video_statistics": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of video statistics returned."
                },
                "statistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video_statistic"
                    }
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "video_transition_callback": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string",
                    "description": "The job that processed this video."
                },
                "video_id": {
                    "type": "string",
                    "description": "The ID of the video."
                },
                "framenos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of frame numbers identified in the video."
                },
                "thumbnails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the thumbnails identified in the video."
                },
                "serving_url": {
                    "type": "string",
                    "description": "The URL to put on your site to show thumbnails for this video."
                },
                "error": {
                    "type": "string",
                    "description": "A string describing the error (if one occurred)."
                },
                "processing_state": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "processing",
                        "processed",
                        "serving",
                        "failed"
                    ],
                    "description": "State of the video being processed."
                },
                "experiment_state": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "running",
                        "complete",
                        "disabled",
                        "override"
                    ],
                    "description": "State of the A/B experiment for this video."
                },
                "winner_thumbnail": {
                    "type": "string",
                    "description": "Thumbnail ID of the best thumbnail in the experiment once it's complete."
                }
            }
        },
        "videos": {
            "type": "object",
            "properties": {
                "video_count": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of videos being returned."
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video"
                    },
                    "description": "The returned videos."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "limit": {
            "type": "object",
            "properties": {
                "video_posts": {
                    "type": "integer",
                    "description": "This is how many successful video creations that have happened in this time window."
                },
                "max_video_posts": {
                    "type": "integer",
                    "description": "The maximum amount of video posts that can be completed in this time window."
                },
                "refresh_time_video_posts": {
                    "description": "When video_posts will reset and start a new time window.",
                    "type": "string",
                    "format": "date-time"
                },
                "max_video_size": {
                    "description": "Max duration of the video in seconds that can be processed for this account.",
                    "type": "number",
                    "format": "float"
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "tag_thumbnails": {
            "type": "object",
            "description": "Contains the thumbnail objects for a given tag.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the tag."
                },
                "thumbnails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/thumbnail"
                    },
                    "description": "The set of thumbnails."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "search_tags": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of tags being returned."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tag_thumbnails"
                    },
                    "description": "The returned tags."
                },
                "next_page": {
                    "type": "string",
                    "description": "Link to next page of tags."
                },
                "prev_page": {
                    "type": "string",
                    "description": "Link to previous page of tags."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "search_videos": {
            "type": "object",
            "properties": {
                "video_count": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "The number of videos being returned."
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video"
                    },
                    "description": "The returned videos."
                },
                "next_page": {
                    "type": "string",
                    "description": "link to next (older) page of videos"
                },
                "prev_page": {
                    "type": "string",
                    "description": "link to prev (newer) page of videos"
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "account": {
            "type": "object",
            "properties": {
                "tracker_account_id": {
                    "type": "string",
                    "description": "ID to use in the tracker code."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the account was last updated."
                },
                "account_id": {
                    "type": "string",
                    "description": "ID of the account."
                },
                "email": {
                    "type": "string",
                    "description": "email of the account."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the account was created."
                },
                "integration_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of integration IDs associated with the account."
                },
                "default_size": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Default size of the image `[width, height]`."
                },
                "staging_tracker_account_id": {
                    "type": "string",
                    "description": "ID to use in tracking code on staging."
                },
                "default_thumbnail_id": {
                    "type": "string",
                    "description": "Default thumbnail if no others are found."
                },
                "customer_name": {
                    "type": "string",
                    "description": "Name of the customer."
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of usernames associated to the account."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "user": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Username of the user, this is always an email."
                },
                "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the account was last updated."
                },
                "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An ISO8601 date when the account was created."
                },
                "email": {
                    "type": "string",
                    "description": "email of the user."
                },
                "access_level": {
                    "type": "integer",
                    "description": "bit packed integer that represents what this user can access."
                },
                "first_name": {
                    "type": "string",
                    "description": "First name of the user."
                },
                "last_name": {
                    "type": "string",
                    "description": "Last name of the user."
                },
                "title": {
                    "type": "string",
                    "description": "Title of the user."
                },
                "cell_phone_number": {
                    "type": "string",
                    "description": "Cell phone number of the user."
                },
                "secondary_email": {
                    "type": "string",
                    "description": "Secondary or Recovery email for the user."
                },
                "error": {
                    "$ref": "#/definitions/error"
                }
            }
        },
        "feature": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this feature object"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this feature"
                },
                "index": {
                    "type": "integer",
                    "description": "Integer index into the feature vector."
                },
                "model_name": {
                    "type": "string",
                    "description": "Name of the model that provided this feature"
                }
            }
        }
    }
}
